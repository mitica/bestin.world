---
import { TOP_COUNTRIES } from "../config";
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import {
  countryCodeToFlagEmoji,
  getCountriesByContinent,
  uniq
} from "../utils";
import { classNames } from "../utils";
import ArrowUpIcon from "../components/shared/ArrowUpIcon.astro";
import ArrowDownIcon from "../components/shared/ArrowDownIcon.astro";

export async function getStaticPaths() {
  const countries = await getCollection("countries");
  return countries
    .map((country) => {
      const vsCodes = uniq(
        TOP_COUNTRIES.concat(
          getCountriesByContinent(country.data.continents[0].code)
        )
      ).filter((c) => c !== country.id);
      return vsCodes
        .map((vsCode) => ({
          c1: country,
          c2: countries.find((c) => c.id === vsCode)!
        }))
        .filter(({ c1, c2 }) => c1 && c2);
    })
    .flat()
    .map(({ c1, c2 }) => {
      return {
        params: { c1: c1.id, c2: c2.id },
        props: { country: c1.data, vsCountry: c2.data }
      };
    });
}

const { country, vsCountry } = Astro.props;
const [indicatorRanks, indicators, toipics] = await Promise.all([
  getCollection("indicatorRanks"),
  getCollection("indicators"),
  getCollection("topics")
]);
const getIndicator = (id: string) => {
  return indicators.find((indicator) => indicator.id === id)!.data;
};
const getTopic = (id: string) => {
  return toipics.find((topic) => topic.id === id)!.data;
};

const filterByUnit = (unit?: string) => {
  return (
    !unit ||
    (!/\bUSD\b/.test(unit) && !/\$/i.test(unit) && !/\bLCU\b/.test(unit))
  );
};

const filterIndicator = (indicator: {
  name: string;
  commonName?: string;
  unit?: string;
}) => {
  const text = [indicator.commonName || indicator.name, indicator.unit]
    .filter(Boolean)
    .join(" ");
  return (
    /(\%|per|Per\b|Index|scale|days|years|rank|Rank|Bound)/.test(text) &&
    !/LCU/.test(text) &&
    !/Estimate\b/.test(text)
  );
};

const year = new Date().getFullYear();

const ranks = indicatorRanks
  .map((rank) =>
    rank.data
      .filter(
        (it) => it.countryId === country.id || it.countryId === vsCountry.id
      )
      .map((r) => ({
        ...r,
        indicatorId: rank.id,
        indicator: getIndicator(rank.id)
      }))
  )
  .flat()
  .filter((r) => r.date > year - 8 && filterIndicator(r.indicator));

const countryRanks = ranks.filter((r) => r.countryId === country.id);
const vsCountryRanks = ranks.filter((r) => r.countryId === vsCountry.id);
const countryRanksBetter = countryRanks.filter((r) => {
  const vsRank = vsCountryRanks.find((v) => v.indicatorId === r.indicatorId);
  return vsRank && r.rank < vsRank.rank && r.value !== vsRank.value;
});
const vsCountryRanksBetter = vsCountryRanks.filter((r) => {
  const countryRank = countryRanks.find((c) => c.indicatorId === r.indicatorId);
  return (
    countryRank && r.rank < countryRank.rank && r.value !== countryRank.value
  );
});

const rankList = countryRanksBetter
  .map((cr) => {
    const vsCr = vsCountryRanks.find((v) => v.indicatorId === cr.indicatorId)!;
    return {
      cr,
      vsCr,
      diff: vsCr.rank - cr.rank
    };
  })
  .sort((a, b) => b.diff - a.diff);

const title = `${country.name} vs ${vsCountry.name} Insights`;
const description = `Explore the latest insights comparing ${country.name} and ${vsCountry.name}. Discover what ${country.name} excels in and where it falls behind.`;
const canonical = `/${country.id}-vs-${vsCountry.id}/`;
const countryEmoji = countryCodeToFlagEmoji(country.id);
const vsCountryEmoji = countryCodeToFlagEmoji(vsCountry.id);
---

<Layout title={title} description={description} canonical={canonical}>
  <div class="flex flex-col gap-4">
    <h2>{title}</h2>
    <p class="text-lg">
      <a class="a font-medium" href={`/${country.slug}/`}>{country.name}</a> is ranked
      better in <span class="font-medium"
        >{countryRanksBetter.length} indicators</span
      >, while {vsCountry.name} is ranked better in <a
        class="a font-medium"
        href={`/${vsCountry.id}-vs-${country.id}/`}
        >{vsCountryRanksBetter.length} indicators</a
      >.
    </p>
    <ul>
      {
        rankList.map(({ cr, vsCr }) => {
          const indicator = cr.indicator;
          const unit = indicator.unit;
          const buildInfo = (
            v: typeof cr,
            icon: Element,
            flag: string,
            className?: string
          ) => {
            return (
              <div class={classNames(`flex flex-row gap-2`, className)}>
                {icon}
                {/* <span>{v.rank}</span> */}
                <span>
                  {v.value.toLocaleString("en", {
                    maximumFractionDigits: 2
                  })}
                </span>
                <span>{flag}</span>
              </div>
            );
          };

          const name = indicator.commonName || indicator.name;

          return (
            <li>
              <h5>
                {name}
                {unit && !name.includes(unit) ? ` (${unit})` : null}
              </h5>
              <div class="flex items-center gap-2 pb-4">
                {buildInfo(
                  cr,
                  <ArrowUpIcon className="h-4 w-4 text-green-500" />,
                  countryEmoji
                )}
                <span>|</span>
                {buildInfo(
                  vsCr,
                  <ArrowDownIcon className="h-4 w-4 text-red-500" />,
                  vsCountryEmoji,
                  "flex-row-reverse"
                )}
              </div>
              <p class="text-secondary text-sm">{indicator.valueInfo}</p>
            </li>
          );
        })
      }
    </ul>
  </div>
</Layout>
