---
import { TOP_COUNTRIES } from "../config";
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import {
  countryCodeToFlagEmoji,
  getCountriesByContinent,
  getCountryContinent,
  getVsCountryCodes,
  uniq
} from "../utils";
import { classNames } from "../utils";
import ArrowUpIcon from "../components/shared/ArrowUpIcon.astro";
import ArrowDownIcon from "../components/shared/ArrowDownIcon.astro";
import { localesProvider } from "../locales";
import { compareCountryIndicators } from "../helpers/country-vs-country-indicators";
import ArrowRightIcon from "../components/shared/ArrowRightIcon.astro";

export async function getStaticPaths() {
  const countries = await getCollection("countries");
  return countries
    .map((country) => {
      const vsCodes = getVsCountryCodes(
        countries.map((c) => c.data).flat(),
        country.data
      );
      return vsCodes
        .map((vsCode) => ({
          c1: country,
          c2: countries.find((c) => c.id === vsCode)!
        }))
        .filter(({ c1, c2 }) => c1 && c2);
    })
    .flat()
    .map(({ c1, c2 }) => {
      return {
        params: { c1: c1.id, c2: c2.id },
        props: { country: c1.data, vsCountry: c2.data }
      };
    });
}

const { country, vsCountry } = Astro.props;

const [indicatorRanks, indicators] = await Promise.all([
  getCollection("indicatorRanks"),
  getCollection("indicators")
]);

const { list1, list2 } = await compareCountryIndicators({
  id1: country.id,
  id2: vsCountry.id,
  indicators: indicators.map((i) => i.data),
  indicatorRanks: indicatorRanks.map((ir) => ir.data).flat()
});

const locales = localesProvider.lang("en");
const title = locales.country_vs_country_title(country.name, vsCountry.name);
const description = locales.country_vs_country_description(
  country.name,
  vsCountry.name
);
const canonical = `/${country.id}-vs-${vsCountry.id}/`;
const countryEmoji = countryCodeToFlagEmoji(country.id);
const vsCountryEmoji = countryCodeToFlagEmoji(vsCountry.id);
---

<Layout title={title} description={description} canonical={canonical}>
  <div class="flex flex-col gap-4">
    <h2>{title}</h2>
    <p class="text-lg">
      <a class="a font-medium" href={`/${country.slug}/`}
        >{countryCodeToFlagEmoji(country.id)} {country.name}</a
      > is ranked better in <span class="font-medium"
        >{list1.length} indicators</span
      >, while {vsCountry.name} is ranked better in <a
        class="a font-medium"
        href={`/${vsCountry.id}-vs-${country.id}/`}>{list2.length} indicators</a
      >.
    </p>
    <ul>
      {
        list1.map(({ value1, value2 }) => {
          const indicator = value1.indicator;
          const unit = "";
          const buildInfo = (
            v: typeof value1,
            icon: Element,
            flag: string,
            className?: string
          ) => {
            return (
              <div class={classNames(`flex flex-row gap-2`, className)}>
                {icon}
                {/* <span>{v.rank}</span> */}
                <span>
                  {v.value.toLocaleString("en", {
                    maximumFractionDigits: 2
                  })}
                </span>
                <span>{flag}</span>
              </div>
            );
          };

          const name = indicator.name;
          const emoji = indicator.emoji || null;

          return (
            <li>
              <h5>
                {emoji}
                {name}
                {unit ? ` (${unit})` : null}
              </h5>
              <div class="flex items-center gap-2 pb-4">
                {buildInfo(
                  value1,
                  <ArrowUpIcon className="h-4 w-4 text-green-500" />,
                  countryEmoji
                )}
                <span>|</span>
                {buildInfo(
                  value2,
                  <ArrowDownIcon className="h-4 w-4 text-red-500" />,
                  vsCountryEmoji,
                  "flex-row-reverse"
                )}
              </div>
              <p class="text-secondary text-sm">{indicator.valueInfo}</p>
            </li>
          );
        })
      }
    </ul>
    <p>
      <a class="a flex gap-2" href={`/${vsCountry.id}-vs-${country.id}/`}
        ><ArrowRightIcon className="h-4 w-4" />
        <span
          >{
            locales.country_vs_country_title(vsCountry.name, country.name)
          }</span
        >
      </a>
    </p>
  </div>
</Layout>
